{"version":3,"sources":["components/Searchbar.tsx","components/Results.tsx","components/App.tsx","index.tsx"],"names":["Searchbar","props","useState","term","setTerm","className","placeholder","type","value","onChange","e","currentTarget","handleTerm","Results","nominated","setNominated","movies","error","useEffect","nominations","JSON","parse","localStorage","getItem","setItem","stringify","toggleNomintate","movie","includes","filter","el","imdbID","map","key","Title","Year","onClick","disabled","App","setMovies","setError","axios","get","process","API_KEY","then","res","data","Error","Search","catch","console","log","require","config","ReactDOM","render","document","getElementById"],"mappings":"8OAMaA,EAAY,SAACC,GAA2B,IAAD,EAC1BC,mBAAiB,IADS,mBAC3CC,EAD2C,KACrCC,EADqC,KAQlD,OAAO,yBAAKC,UAAU,+BACpB,2CACA,2BAAOA,UAAU,gEAAgEC,YAAY,YAAYC,KAAK,OAAOC,MAAOL,EAAMM,SAP/G,SAACC,GACpBN,EAAQM,EAAEC,cAAcH,OACxBP,EAAMW,WAAWF,EAAEC,cAAcH,Y,QCFxBK,EAAU,SAACZ,GAAyB,IAAD,EACZC,mBAA0B,IADd,mBACvCY,EADuC,KAC5BC,EAD4B,KAEtCC,EAAwBf,EAAxBe,OAAQb,EAAgBF,EAAhBE,KAAMc,EAAUhB,EAAVgB,MAGtBC,qBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,gBACpDR,EAAaI,KACZ,IAGHD,qBAAU,WACRI,aAAaE,QAAQ,cAAeJ,KAAKK,UAAUX,MAClD,CAACA,IAGJ,IAAMY,EAAkB,SAACC,GAClBb,EAAWc,SAASD,GACvBZ,EAAaD,EAAUe,QAAO,SAAAC,GAAE,OAAIA,EAAGC,SAAWJ,EAAMI,WAExDhB,EAAa,GAAD,mBAAKD,GAAL,CAAgBa,MAIhC,OAAO,yBAAKtB,UAAU,aACpB,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,UACH,KAATF,EAAc,wCAAoB,4CAAkBA,EAAlB,MACnC,wBAAIE,UAAU,+BACVY,GAAkB,KAATd,EAAec,EAASD,EAAiBgB,KAAI,SAACL,GACvD,OAAO,wBAAIM,IAAKN,EAAMI,OAAQ1B,UAAU,mBAAjC,UACDsB,EAAMO,MADL,aACeP,EAAMQ,KADrB,KAEL,4BAAQ5B,KAAK,SAASF,UAAU,yCAAyC+B,QAAS,kBAAMV,EAAgBC,IAAQU,SAAUvB,EAAUc,SAASD,IAA7I,kBAKR,yBAAKtB,UAAU,UACb,4CACA,wBAAIA,UAAU,+BACVS,EAAoBkB,KAAI,SAACL,GACzB,OAAO,wBAAIM,IAAKN,EAAMI,OAAQ1B,UAAU,mBAAjC,UACDsB,EAAMO,MADL,aACeP,EAAMQ,KADrB,KAEL,4BAAQ5B,KAAK,SAASF,UAAU,wCAAwC+B,QAAS,kBAAMV,EAAgBC,KAAvG,mBCnCC,SAASW,IAAO,IAAD,EACApC,mBAA+B,IAD/B,mBACrBc,EADqB,KACbuB,EADa,OAEJrC,mBAAiB,IAFb,mBAErBC,EAFqB,KAEfC,EAFe,OAGFF,mBAAwB,MAHtB,mBAGrBe,EAHqB,KAGduB,EAHc,KAwB5B,OAAO,yBAAKnC,UAAU,OACpB,yBAAKA,UAAU,QACb,wBAAIA,UAAU,6BAAd,gBACA,kBAAC,EAAD,CAAWO,WArBI,SAACT,GAClBC,EAAQD,GACRsC,IACGC,IADH,oCACoCvC,EADpC,mBACmDwC,4HAAYC,UAC5DC,MAAK,SAACC,GACDA,EAAIC,KAAKC,OACXR,EAASM,EAAIC,KAAKC,OAClBT,EAAU,MAEVA,EAAUO,EAAIC,KAAKE,QACnBT,EAAS,UAGZU,OAAM,SAACjC,GACNkC,QAAQC,IAAInC,UAShB,kBAAC,EAAD,CAASD,OAAQA,EAAQb,KAAMA,EAAMc,MAAOA,KAzChDoC,EAAQ,IAAUC,SCElBC,IAASC,OAAO,kBAAClB,EAAD,MAASmB,SAASC,eAAe,W","file":"static/js/main.18335e12.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ntype SearchbarProps = {\n  handleTerm: (term: string) => void;\n}\n\nexport const Searchbar = (props: SearchbarProps) => {\n  const [term, setTerm] = useState<string>(\"\");\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    setTerm(e.currentTarget.value);\n    props.handleTerm(e.currentTarget.value);\n  }\n\n  return <div className=\"searchbar container mt-sm-5\">\n    <h5>Movie title</h5>\n    <input className=\"form-control form-control-lg shadow p-3 mb-5 bg-white rounded\" placeholder=\"Search...\" type=\"text\" value={term} onChange={handleChange} />\n  </div>\n} ","import React, { useState, useEffect } from 'react';\nimport { MoviesListProps, MovieProps } from \"./App\"\n\ntype ResultsProps = {\n  movies: MoviesListProps | [];\n  term: string;\n  error: string | null;\n}\n\nexport const Results = (props: ResultsProps) => {\n  const [nominated, setNominated] = useState<MoviesListProps>([])\n  const { movies, term, error } = props;\n\n  // Initial the nomination list from localStorage\n  useEffect(() => {\n    const nominations = JSON.parse(localStorage.getItem('nominations') as string);\n    setNominated(nominations);\n  }, []);\n\n  // Save nomination list in localStorage\n  useEffect(() => {\n    localStorage.setItem('nominations', JSON.stringify(nominated));\n  }, [nominated]);\n\n  // Nominate movie or remove nomination movie \n  const toggleNomintate = (movie: MovieProps) => {\n    if ((nominated).includes(movie)) {\n      setNominated(nominated.filter(el => el.imdbID !== movie.imdbID))\n    } else {\n      setNominated([...nominated, movie]);\n    }\n  }\n\n  return <div className=\"container\">\n    <div className=\"row results mt-md-4\">\n      <div className=\"col-sm\">\n        {term === \"\" ? <h3>Results:</h3> : <h3>Results for \"{term}\":</h3>}\n        <ul className=\"list-group list-group-flush\">\n          {(error && term !== \"\") ? error : (movies as any[]).map((movie) => {\n            return <li key={movie.imdbID} className=\"list-group-item\">\n              {`${movie.Title} (${movie.Year})`}\n              <button type=\"button\" className=\"btn btn-sm btn-outline-success ml-sm-2\" onClick={() => toggleNomintate(movie)} disabled={nominated.includes(movie)}>Nominate</button>\n            </li>\n          })}\n        </ul>\n      </div>\n      <div className=\"col-sm\">\n        <h3>Nominations:</h3>\n        <ul className=\"list-group list-group-flush\">\n          {(nominated as any[]).map((movie) => {\n            return <li key={movie.imdbID} className=\"list-group-item\">\n              {`${movie.Title} (${movie.Year})`}\n              <button type=\"button\" className=\"btn btn-sm btn-outline-danger ml-sm-2\" onClick={() => toggleNomintate(movie)}>Remove</button>\n            </li>\n          })}\n        </ul>\n      </div>\n    </div>\n  </div>\n} ","import React, { useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport { Searchbar } from './Searchbar';\nimport { Results } from \"./Results\";\n\nrequire('dotenv').config();\n\nexport interface MovieProps {\n  Title: string;\n  Year: string;\n  imdbID: string;\n  Type: \"movie\" | \"series\";\n  Poster: string;\n}\n\nexport interface MoviesListProps extends Array<MovieProps> { }\n\nexport default function App() {\n  const [movies, setMovies] = useState<MoviesListProps | []>([]);\n  const [term, setTerm] = useState<string>(\"\")\n  const [error, setError] = useState<string | null>(null)\n\n  // Get data from API  \n  const handleTerm = (term: string) => {\n    setTerm(term);\n    axios\n      .get(`http://www.omdbapi.com/?s=${term}&apikey=${process.env.API_KEY}`)\n      .then((res: AxiosResponse) => {\n        if (res.data.Error) {\n          setError(res.data.Error);\n          setMovies([]);\n        } else {\n          setMovies(res.data.Search);\n          setError(null);\n        }\n      })\n      .catch((error) => {\n        console.log(error)\n      });\n  }\n\n  return <div className=\"app\">\n    <div className=\"hero\">\n      <h1 className=\"title font-italic pt-sm-5\">The Shoppies</h1>\n      <Searchbar handleTerm={handleTerm} />\n    </div>\n    <Results movies={movies} term={term} error={error} />\n  </div>\n} ","import 'bootstrap/dist/css/bootstrap.css';\nimport \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}